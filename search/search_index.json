{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"cooking_auth A user authentication microservice for an online cooking forum. Check out the project's documentation . Prerequisites Docker Initialize the project Start the dev server for local development: docker-compose up Create a superuser to login to the admin: docker-compose run --rm web ./manage.py createsuperuser Swagger-ui You can find the swagger ui at http://localhost:7070/api/v1/schema/swagger-ui","title":"Home"},{"location":"#cooking_auth","text":"A user authentication microservice for an online cooking forum. Check out the project's documentation .","title":"cooking_auth"},{"location":"#prerequisites","text":"Docker","title":"Prerequisites"},{"location":"#initialize-the-project","text":"Start the dev server for local development: docker-compose up Create a superuser to login to the admin: docker-compose run --rm web ./manage.py createsuperuser","title":"Initialize the project"},{"location":"#swagger-ui","text":"You can find the swagger ui at http://localhost:7070/api/v1/schema/swagger-ui","title":"Swagger-ui"},{"location":"api/authentication/","text":"Authentication For clients to authenticate, the token key should be included in the Authorization HTTP header. The key should be prefixed by the string literal \"Bearer\", with whitespace separating the two strings. For example: Authorization: Bearer eyJjbGllbnRfaWQiOiJZekV6TUdkb01ISm5PSEJpT0cxaWJEaHlOVEE9IiwicmVzcG9uc2VfdHlwZSI6ImNvZGUiLCJzY29wZSI6ImludHJvc2NwZWN0X3Rva2VucywgcmV2b2tlX3Rva2VucyIsImlzcyI6ImJqaElSak0xY1hwYWEyMXpkV The curl command line tool may be useful for testing token authenticated APIs. For example: curl -X GET http://127.0.0.1:8000/api/v1/users/ -H 'Authorization: Bearer eyJjbGllbnRfaWQiOiJZekV6TUdkb01ISm5PSEJpT0cxaWJEaHlOVEE9IiwicmVzcG9uc2VfdHlwZSI6ImNvZGUiLCJzY29wZSI6ImludHJvc2NwZWN0X3Rva2VucywgcmV2b2tlX3Rva2VucyIsImlzcyI6ImJqaElSak0xY1hwYWEyMXpkV' Retrieving Tokens Authorization tokens are issued and returned when a user logs in. Upon registration a user can specify wether to enroll for 2 factor authentication by specifying has_2fa: True in the registration request. Login Request without 2FA : POST /api/v1/login/ Parameters: Name Type Description username string The user's username password string The user's password Response : { \"message\": \"Login successful\", \"token\" : { \"access\": \"eyJjbGllbnRfaWQiOiJZekV6TUdkb01ISm5PSEJpT0cxaWJEaHlOVEE9IiwicmVzcG9uc2VfdHlwZSI6ImNvZGUiLCJzY29wZSI6ImludHJvc2NwZWN0X3Rva2VucywgcmV2b2tlX3Rva2VucyIsImlzcyI6ImJqaElSak0xY1hwYWEyMXpkV\", \"refresh\": \"eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJjbGllbnRfaWQiOiJZekV6TUdkb01ISm5PSEJpT0cxaWJEaHlOVEE9IiwicmVzcG9uc2VfdHlwZSI6ImNvZGUiLCJzY29wZSI6ImludHJvc2NwZWN0X3Rva2VucywgcmV2b2tlX3Rva2Vu\" } } Login Request with 2FA -- First Step : POST /api/v1/login/ Parameters: Name Type Description username string The user's username password string The user's password Response : { \"message\": \"Login via email OTP\", \"_links\" : { \"href\": \"/api/v1/login/:user_id/otp/\", \"method\": \"POST\", \"body\": { \"code\": { \"type\": \"str\" } }, } } Login Request with 2FA -- Second Step : POST /api/v1/login/:user_id/otp Parameters: Name Type Description code string The OTP received via mail Response : { \"message\": \"Login successful\", \"token\" : { \"access\": \"eyJjbGllbnRfaWQiOiJZekV6TUdkb01ISm5PSEJpT0cxaWJEaHlOVEE9IiwicmVzcG9uc2VfdHlwZSI6ImNvZGUiLCJzY29wZSI6ImludHJvc2NwZWN0X3Rva2VucywgcmV2b2tlX3Rva2VucyIsImlzcyI6ImJqaElSak0xY1hwYWEyMXpkV\", \"refresh\": \"eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJjbGllbnRfaWQiOiJZekV6TUdkb01ISm5PSEJpT0cxaWJEaHlOVEE9IiwicmVzcG9uc2VfdHlwZSI6ImNvZGUiLCJzY29wZSI6ImludHJvc2NwZWN0X3Rva2VucywgcmV2b2tlX3Rva2Vu\" } }","title":"Authentication"},{"location":"api/authentication/#authentication","text":"For clients to authenticate, the token key should be included in the Authorization HTTP header. The key should be prefixed by the string literal \"Bearer\", with whitespace separating the two strings. For example: Authorization: Bearer eyJjbGllbnRfaWQiOiJZekV6TUdkb01ISm5PSEJpT0cxaWJEaHlOVEE9IiwicmVzcG9uc2VfdHlwZSI6ImNvZGUiLCJzY29wZSI6ImludHJvc2NwZWN0X3Rva2VucywgcmV2b2tlX3Rva2VucyIsImlzcyI6ImJqaElSak0xY1hwYWEyMXpkV The curl command line tool may be useful for testing token authenticated APIs. For example: curl -X GET http://127.0.0.1:8000/api/v1/users/ -H 'Authorization: Bearer eyJjbGllbnRfaWQiOiJZekV6TUdkb01ISm5PSEJpT0cxaWJEaHlOVEE9IiwicmVzcG9uc2VfdHlwZSI6ImNvZGUiLCJzY29wZSI6ImludHJvc2NwZWN0X3Rva2VucywgcmV2b2tlX3Rva2VucyIsImlzcyI6ImJqaElSak0xY1hwYWEyMXpkV'","title":"Authentication"},{"location":"api/authentication/#retrieving-tokens","text":"Authorization tokens are issued and returned when a user logs in. Upon registration a user can specify wether to enroll for 2 factor authentication by specifying has_2fa: True in the registration request. Login Request without 2FA : POST /api/v1/login/ Parameters: Name Type Description username string The user's username password string The user's password Response : { \"message\": \"Login successful\", \"token\" : { \"access\": \"eyJjbGllbnRfaWQiOiJZekV6TUdkb01ISm5PSEJpT0cxaWJEaHlOVEE9IiwicmVzcG9uc2VfdHlwZSI6ImNvZGUiLCJzY29wZSI6ImludHJvc2NwZWN0X3Rva2VucywgcmV2b2tlX3Rva2VucyIsImlzcyI6ImJqaElSak0xY1hwYWEyMXpkV\", \"refresh\": \"eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJjbGllbnRfaWQiOiJZekV6TUdkb01ISm5PSEJpT0cxaWJEaHlOVEE9IiwicmVzcG9uc2VfdHlwZSI6ImNvZGUiLCJzY29wZSI6ImludHJvc2NwZWN0X3Rva2VucywgcmV2b2tlX3Rva2Vu\" } } Login Request with 2FA -- First Step : POST /api/v1/login/ Parameters: Name Type Description username string The user's username password string The user's password Response : { \"message\": \"Login via email OTP\", \"_links\" : { \"href\": \"/api/v1/login/:user_id/otp/\", \"method\": \"POST\", \"body\": { \"code\": { \"type\": \"str\" } }, } } Login Request with 2FA -- Second Step : POST /api/v1/login/:user_id/otp Parameters: Name Type Description code string The OTP received via mail Response : { \"message\": \"Login successful\", \"token\" : { \"access\": \"eyJjbGllbnRfaWQiOiJZekV6TUdkb01ISm5PSEJpT0cxaWJEaHlOVEE9IiwicmVzcG9uc2VfdHlwZSI6ImNvZGUiLCJzY29wZSI6ImludHJvc2NwZWN0X3Rva2VucywgcmV2b2tlX3Rva2VucyIsImlzcyI6ImJqaElSak0xY1hwYWEyMXpkV\", \"refresh\": \"eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJjbGllbnRfaWQiOiJZekV6TUdkb01ISm5PSEJpT0cxaWJEaHlOVEE9IiwicmVzcG9uc2VfdHlwZSI6ImNvZGUiLCJzY29wZSI6ImludHJvc2NwZWN0X3Rva2VucywgcmV2b2tlX3Rva2Vu\" } }","title":"Retrieving Tokens"},{"location":"api/users/","text":"Users Supports registering, viewing, and updating user accounts. Register a new user account Request : POST /users/ Parameters: Name Type Required Description username string Yes The username for the new user. password string Yes The password for the new user account. first_name string No The user's given name. last_name string No The user's family name. email string Yes The user's email address. has_2fa bool No Wether to use 2 factor authentication Note: Not Authorization Protected Response : Content-Type application/json 201 Created { \"id\": \"6d5f9bae-a31b-4b7b-82c4-3853eda2b011\", \"username\": \"richard\", \"first_name\": \"Richard\", \"last_name\": \"Hendriks\", \"email\": \"richard@piedpiper.com\", \"has_2fa\": false } Get a user's profile information Request : GET /users/:id Parameters: Note: Authorization Protected Response : Content-Type application/json 200 OK { \"id\": \"6d5f9bae-a31b-4b7b-82c4-3853eda2b011\", \"username\": \"richard\", \"first_name\": \"Richard\", \"last_name\": \"Hendriks\", \"email\": \"richard@piedpiper.com\", \"has_2fa\": false } Update your profile information Request : PUT/PATCH /users/:id Parameters: Name Type Description first_name string The first_name of the user object. last_name string The last_name of the user object. email string The user's email address. has_2fa bool Wether the user uses 2 factor authentication Note: All parameters are optional Authorization Protected Response : Content-Type application/json 200 OK { \"id\": \"6d5f9bae-a31b-4b7b-82c4-3853eda2b011\", \"username\": \"richard\", \"first_name\": \"Richard\", \"last_name\": \"Hendriks\", \"email\": \"richard@piedpiper.com\", \"has_2fa\": false }","title":"Users"},{"location":"api/users/#users","text":"Supports registering, viewing, and updating user accounts.","title":"Users"},{"location":"api/users/#register-a-new-user-account","text":"Request : POST /users/ Parameters: Name Type Required Description username string Yes The username for the new user. password string Yes The password for the new user account. first_name string No The user's given name. last_name string No The user's family name. email string Yes The user's email address. has_2fa bool No Wether to use 2 factor authentication Note: Not Authorization Protected Response : Content-Type application/json 201 Created { \"id\": \"6d5f9bae-a31b-4b7b-82c4-3853eda2b011\", \"username\": \"richard\", \"first_name\": \"Richard\", \"last_name\": \"Hendriks\", \"email\": \"richard@piedpiper.com\", \"has_2fa\": false }","title":"Register a new user account"},{"location":"api/users/#get-a-users-profile-information","text":"Request : GET /users/:id Parameters: Note: Authorization Protected Response : Content-Type application/json 200 OK { \"id\": \"6d5f9bae-a31b-4b7b-82c4-3853eda2b011\", \"username\": \"richard\", \"first_name\": \"Richard\", \"last_name\": \"Hendriks\", \"email\": \"richard@piedpiper.com\", \"has_2fa\": false }","title":"Get a user's profile information"},{"location":"api/users/#update-your-profile-information","text":"Request : PUT/PATCH /users/:id Parameters: Name Type Description first_name string The first_name of the user object. last_name string The last_name of the user object. email string The user's email address. has_2fa bool Wether the user uses 2 factor authentication Note: All parameters are optional Authorization Protected Response : Content-Type application/json 200 OK { \"id\": \"6d5f9bae-a31b-4b7b-82c4-3853eda2b011\", \"username\": \"richard\", \"first_name\": \"Richard\", \"last_name\": \"Hendriks\", \"email\": \"richard@piedpiper.com\", \"has_2fa\": false }","title":"Update your profile information"}]}